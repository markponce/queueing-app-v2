{"version":3,"sources":["features/queues/queuesSlice.js","features/counters/countersSlice.js","features/counters/CounterSelect.js","features/queues/Queues.js","features/board/Board.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["fetchQueues","createAsyncThunk","a","axios","get","res","data","queuesSlice","createSlice","name","initialState","queues","status","error","reducers","setQueues","state","action","extraReducers","pending","fulfilled","payload","rejected","selectQueues","fetchCounters","postSelectedCounter","selectedCounter","post","getSelectedCounter","countersSlice","counters","setSelectedCounter","selectCounters","actions","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","CounterSelect","classes","useSelector","dispatch","useDispatch","useEffect","promise1","promise2","abort","FormControl","className","InputLabel","htmlFor","Select","native","value","onChange","e","preventDefault","val","target","inputProps","id","aria-label","map","c","key","_id","Queues","promise","console","log","io","on","msg","table","style","padding","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","Array","isArray","queue","scope","isPriority","ordinal","toString","padStart","customerType","getCustomerType","customerName","services","s","getServices","showStatus","Button","variant","color","onClick","patch","counterId","then","d","catch","alert","Board","useState","countersQueue","setcountersQueue","source","CancelToken","cancelToken","token","cancel","cq","number","App","exact","path","counterSlice","increment","decrement","incrementByAmount","configureStore","reducer","counter","counterReducer","queuesReducer","countersReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18d71715.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const fetchQueues = createAsyncThunk('queues/fetchQueues', async () => {\n  const res = await axios.get('queues');\n  // console.log(res.data)\n  return res.data;\n})\n\n// export const callQueue = createAsyncThunk('queues', async (id, counterId) => {\n//   const res = await axios.patch('queues/' + id);\n//   return res.data;\n// })\n\nexport const queuesSlice = createSlice({\n  name: 'queues',\n  initialState: {\n    queues: [],\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n    setQueues: (state, action) => {\n\n    }\n  },\n  extraReducers: {\n    // [callQueue.fulfilled]: (state, action) => {\n    //   state.status = 'success'\n    //   // state.queues = action.payload\n    //   // console.log('success')\n    // },\n    // [callQueue.rejected]: (state, action) => {\n    //   state.status = 'failed'\n    //   state.error = action.payload\n    //   // console.log('failed')\n    // },\n    [fetchQueues.pending]: (state, action) => {\n      state.status = 'loading'\n      // console.log('loading')\n    },\n    [fetchQueues.fulfilled]: (state, action) => {\n      state.status = 'success'\n      state.queues = action.payload\n      // console.log('success')\n    },\n    [fetchQueues.rejected]: (state, action) => {\n      state.status = 'failed'\n      // console.log(action);\n      state.error = action.payload\n      // console.log('failed')\n    },\n\n    // [callQueue.pending]: (state, action) => {\n      // state.status = 'loading'\n      // console.log('loading')\n    // },\n\n    // [callQueue.rejected]: (state, action) => {\n      // state.status = 'failed'\n      // console.log(action);\n      // state.error = action.payload\n      // console.log('failed')\n    // },\n  }\n});\n\n// const { setQueues } = queuesSlice.actions;\n\nexport const selectQueues = (state) => {\n  return state.queues;\n}\n\nexport default queuesSlice.reducer;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const fetchCounters = createAsyncThunk('counters/fetchCounters', async () => {\n  const res = await axios.get('counters');\n  // console.log('countersSlice fetchCounters')\n  // console.log(res.data)\n  return res.data;\n})\n\nexport const postSelectedCounter = createAsyncThunk('counters/postSelectedCounter', async (selectedCounter) => {\n  const res = await axios.post('userSession/selectedCounter', {selectedCounter});\n  return res.data;\n})\n\nexport const getSelectedCounter = createAsyncThunk('counters/getSelectedCounter', async () => {\n  const res = await axios.get('userSession/selectedCounter');\n  return res.data;\n})\n\nexport const countersSlice = createSlice({\n  name: 'counters',\n  initialState: {\n    counters: [],\n    status: 'idle',\n    error: null,\n    selectedCounter: ''\n  },\n  reducers: {\n    setSelectedCounter(state, action) {\n      // console.log(action.payload);\n      state.selectedCounter = action.payload;\n    },\n  },\n  extraReducers: {\n    [getSelectedCounter.pending]: (state, action) => {\n      state.status = 'loading'\n    },\n    [getSelectedCounter.fulfilled]: (state, action) => {\n      state.status = 'success'\n      state.selectedCounter = action.payload.selectedCounter\n    },\n    [getSelectedCounter.rejected]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.payload\n    },\n\n    [postSelectedCounter.pending]: (state, action) => {\n      state.status = 'loading'\n    },\n    [postSelectedCounter.fulfilled]: (state, action) => {\n      state.status = 'success'\n      state.selectedCounter = action.payload.selectedCounter\n    },\n    [postSelectedCounter.rejected]: (state, action) => {\n      state.status = 'failed'\n      state.error = action.payload\n    },\n\n    [fetchCounters.pending]: (state, action) => {\n      state.status = 'loading'\n      // console.log('loading')\n    },\n    [fetchCounters.fulfilled]: (state, action) => {\n      state.status = 'success'\n      state.counters = action.payload\n      // console.log('success')\n    },\n    [fetchCounters.rejected]: (state, action) => {\n      state.status = 'failed'\n      // console.log(action);\n      state.error = action.payload\n      // console.log('failed')\n    },\n  }\n});\n\nexport const { setSelectedCounter } = countersSlice.actions;\n\nexport const selectCounters = (state) => {\n  // console.log('selectCounters');\n  // console.log(state.counters)\n  return state.counters;\n}\n\nexport const selectedCounter = (state) => {\n  // console.log('selectCounters');\n  // console.log(state.counters)\n  return state.selectedCounter;\n}\n\nexport default countersSlice.reducer;\n","import React, { useEffect } from 'react'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\n// import FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n// import NativeSelect from '@material-ui/core/NativeSelect';\n// import {fetchQueues} from './../queues/queuesSlice'\n\n\nimport {\n  selectCounters,\n  fetchCounters,\n  setSelectedCounter,\n  postSelectedCounter,\n  getSelectedCounter\n} from './countersSlice';\nimport { useSelector, useDispatch } from 'react-redux';\n\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport default function CounterSelect() {\n\n  const classes = useStyles();\n  const { counters, selectedCounter, status } = useSelector(selectCounters);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    let promise1 = dispatch(fetchCounters())\n    let promise2 = dispatch(getSelectedCounter())\n\n    return () => {\n      promise1.abort()\n      promise2.abort()\n    }\n  }, [])\n\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    const val = e.target.value\n    let promise = dispatch(postSelectedCounter(val))\n  }\n\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"counter\">Counter</InputLabel>\n        <Select\n          native\n          value={selectedCounter}\n          onChange={handleChange}\n          inputProps={{\n            name: 'counter',\n            id: 'select-ounter',\n          }}\n        >\n          <option aria-label=\"None\" value=\"\" />\n          {\n            counters.map(c => {\n              return (<option key={c._id} value={c._id}>{c.name}</option>)\n            })\n          }\n        </Select>\n      </FormControl>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectQueues,\n  fetchQueues\n} from './queuesSlice';\nimport io from 'socket.io-client';\nimport CounterSelect from './../counters/CounterSelect';\nimport axios from 'axios';\nimport { selectCounters } from './../counters/countersSlice';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nexport default function Queues() {\n  const {\n    queues,\n    status,\n  } = useSelector(selectQueues);\n\n  const { selectedCounter } = useSelector(selectCounters);\n  // const [disableCallButton, setDisableCallButton] = useState(false);\n  // const [disableDoneButton, setDisableDoneButton] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log('useEffect')\n    let promise\n    promise = dispatch(fetchQueues());\n    const socket = io();\n    socket.on('message', (msg) => {\n      dispatch(fetchQueues());\n    });\n    return () => {\n      if (promise) {\n        promise.abort()\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    console.log('useEffect selectedCounter')\n    let promise\n    promise = dispatch(fetchQueues());\n    return () => {\n      if (promise) {\n        promise.abort()\n      }\n    }\n  }, [selectedCounter])\n\n  // 1: 'NORMAL',\n  // 2: 'SENIOR',\n  // 3: 'PWD',\n  // 4: 'PREGNANT'\n  const getCustomerType = (customerType) => {\n    switch (customerType) {\n      case 2:\n        return 'SENIOR'\n      case 3:\n        return 'PWD'\n      case 4:\n        return 'PREGNANT'\n      default:\n        return '-'\n    }\n  }\n\n  const getServices = ({ services }) => {\n    if (Array.isArray(services)) return (\n      <ul>\n        {\n          services.map(s => <li key={s._id}>{s.name}</li>)\n        }\n      </ul>\n    )\n  }\n\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n  });\n\n  const classes = useStyles();\n\n  const showStatus = (status) => {\n    if (status === 0) return 'QUEUED';\n    if (status === 1) return 'CALLED';\n  }\n\n  const callQueue = (id) => {\n    if (selectedCounter === '') {\n      alert('Select counter first.')\n      return\n    }\n\n    // setDisableCallButton(true)\n    axios.patch('/queues/call/' + id, {\n      counterId: selectedCounter\n    }).then((d) => d.data)\n      .then((d) => {\n        // console.log(d)\n      })\n      .catch((e) => {\n        // console.log(e)\n        alert(e)\n      })\n    // .finally(() => )\n  }\n\n  const doneQueue = (id) => {\n    if (selectedCounter === '') {\n      alert('Select counter first.')\n      return\n    }\n    // setDisableDoneButton(true)\n    axios.patch('/queues/done/' + id, {\n      counterId: selectedCounter\n    })\n      .then((d) => {\n        // console.log(d.data)\n        return d.data\n      })\n      .then((d) => {\n        // console.log(d)\n      })\n      .catch((e) => {\n        // console.log(e)\n        alert(e)\n      })\n    // .finally(() => setDisableDoneButton(false))\n  }\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <CounterSelect />\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Number</TableCell>\n              <TableCell align=\"center\">Type</TableCell>\n              <TableCell align=\"center\">Name</TableCell>\n              <TableCell align=\"center\">Service</TableCell>\n              <TableCell align=\"center\">Status</TableCell>\n              <TableCell align=\"center\">Action</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {\n              Array.isArray(queues) && queues.map(queue => {\n                return (\n                  <TableRow key={queue.id}>\n                    <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                      <div>{queue.id}</div>\n                      {queue.isPriority && 'P'}{queue.ordinal.toString().padStart(4, '0')}\n                    </TableCell>\n                    <TableCell align=\"center\">{getCustomerType(queue.customerType)}</TableCell>\n                    <TableCell align=\"center\">{queue.customerName}</TableCell>\n                    <TableCell align=\"center\">{getServices(queue)}</TableCell>\n                    <TableCell align=\"center\">{showStatus(queue.status)}</TableCell>\n                    <TableCell align=\"center\">\n                      {(queue.status === 0 && selectedCounter)  && <Button variant=\"contained\" color=\"primary\" onClick={() => callQueue(queue.id)}>Call</Button>}\n                      {(queue.status === 1 && selectedCounter) && <Button variant=\"contained\" color=\"primary\" onClick={() => doneQueue(queue.id)}>Done</Button>}\n                    </TableCell>\n                  </TableRow>\n                )\n              })\n            }\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport axios from 'axios'\nimport io from 'socket.io-client';\n\nexport default function Board() {\n\n  const [countersQueue, setcountersQueue] = useState([])\n\n\n\n\n  useEffect(() => {\n\n    const CancelToken = axios.CancelToken;\n    const source = CancelToken.source();\n\n    let promise = axios.get('counters/queue', {\n      cancelToken: source.token\n    })\n      .then(res => setcountersQueue(res.data))\n      .catch(e => console.log(e))\n\n    const socket = io();\n    socket.on('message', (msg) => {\n      promise = axios.get('counters/queue', {\n        cancelToken: source.token\n      })\n        .then(res => setcountersQueue(res.data))\n        .catch(e => console.log(e))\n    });\n\n    return () => {\n      source.cancel()\n    }\n\n  }, [])\n\n\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label=\"Counter Queues\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Counter</TableCell>\n            <TableCell align=\"right\">Number</TableCell>\n\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {countersQueue.map((cq) => (\n            <TableRow key={cq._id}>\n              <TableCell component=\"th\" scope=\"row\">\n                {cq.name}\n              </TableCell>\n              <TableCell align=\"right\">{cq.queues.number ?? '-'}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}","import React from 'react';\r\nimport Queues from './features/queues/Queues'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Board from './features/board/Board';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        {/* <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/board\">Board</Link>\r\n          </li>\r\n        </ul> */}\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Queues />\r\n          </Route>\r\n          <Route path=\"/board\">\r\n            <Board />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport queuesReducer from '../features/queues/queuesSlice';\r\nimport countersReducer from '../features/counters/countersSlice';\r\n\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    queues: queuesReducer,\r\n    counters : countersReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './custom.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}